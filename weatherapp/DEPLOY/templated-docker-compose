version: "3.1"

services:
  db:
    container_name: weatherapp-db
    image: edjiguimkoudre8/adele93-db:${BUILD_NUMBER}
    environment:
      MYSQL_ROOT_PASSWORD: ${WEATHERAPP_MYSQL_ROOT_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - weatherapp
    restart: always

  redis:
    container_name: weatherapp-redis
    image: redis
    networks:
      - weatherapp
    environment:
      REDIS_USER: redis
      REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: always

  weather:
    container_name: weatherapp-weather
    image: edjiguimkoudre8/adele93-weather:${BUILD_NUMBER}
    expose:
      - 5000
    environment:
      APIKEY: ${WEATHERAPP_API_KEY}
    networks:
      - weatherapp
    restart: always
    depends_on:
      - db
      - redis  

  auth:
    container_name: weatherapp-auth
    image: edjiguimkoudre8/adele93-auth:${BUILD_NUMBER}
    environment:
      DB_HOST: db
      DB_PASSWORD: ${WEATHERAPP_DBPASSWORD}
    expose:
      - 8080
    networks:
      - weatherapp
    restart: always
    depends_on:
      - weather  

  ui:
    container_name: weatherapp-ui
    image: edjiguimkoudre8/adele93-ui:${BUILD_NUMBER}
    environment:
      s5edouard: ${WEATHERAPP_DBPASSWORD}
      AUTH_HOST: auth
      AUTH_PORT: 8080
      WEATHER_HOST: weather
      WEATHER_PORT: 5000
      REDIS_USER: redis
      REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
    expose:
      - 3000
    ports:
      - 3000:3000
    networks:
      - weatherapp
    restart: always
    depends_on:
      - auth 

networks:
  weatherapp:

volumes:
  db-data:
  redis-data: