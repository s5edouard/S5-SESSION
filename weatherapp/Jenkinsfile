pipeline {
    agent {
        label 'production'
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('Dockerhub')
    }
    stages {
        stage('Build-auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    label 'production'
                    args '-u root' // Set the user to root
                }
            }
            steps {
                echo 'Building...'
                script {
                    // Add your build commands here
                    sh '''
                        id
                        cd weatherapp/auth/src/main
                        go build
                        cd -
                        ls -la
                    '''
                }
            }
        }

        stage('Test-ui') {
            agent {
                docker {
                    image 'node:17'
                    label 'production'
                    args '-u root' // Set the user to root
                }
            }
            steps {
                echo 'Testing...'
                script {
                    // Add your build commands here
                    sh '''
                        id
                        cd weatherapp/UI
                        npm run
                    '''
                }
            }
        }

        stage('test-weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    label 'production'
                    args '-u root' // Set the user to root
                }
            }
            steps {
                echo 'testing weather...'
                script {
                    // Add your build commands here
                    sh '''
                        id
                        cd weatherapp/weather
                        pip3 install -r requirements.txt
                    '''
                }
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Login to Docker') {
            steps {
                script {
                    // Docker login
                    withCredentials([usernamePassword(credentialsId: 'Dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }
                }
            }
        }

        stage('Build and Push auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t edjiguimkoudre8/adele93-auth:${BUILD_NUMBER} .
                    docker push edjiguimkoudre8/adele93-auth:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build and Push UI') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/UI
                    docker build -t edjiguimkoudre8/adele93-ui:${BUILD_NUMBER} .
                    docker push edjiguimkoudre8/adele93-ui:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build and Push weather') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/weather
                    docker build -t edjiguimkoudre8/adele93-weather:${BUILD_NUMBER} .
                    docker push edjiguimkoudre8/adele93-weather:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build db') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/db
                    docker build -t edjiguimkoudre8/adele93-db:${BUILD_NUMBER} .
                    docker push edjiguimkoudre8/adele93-db:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build redis') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/redis
                    docker build -t edjiguimkoudre8/adele93-redis:${BUILD_NUMBER} .
                    docker push edjiguimkoudre8/adele93-redis:${BUILD_NUMBER}
                '''
            }
        }

        stage('docker-compose-file-generation') {
            agent {
                label "production"
            }
            steps {
                script {
                    // withCredentials([
                    //     string(credentialsId: 'WEATHERAPP_REDIS_PASSWORD', variable: 'WEATHERAPP_REDIS_PASSWORD'),
                    //     string(credentialsId: 'WEATHERAPP_MYSQL_ROOT_PASSWORD', variable: 'WEATHERAPP_MYSQL_ROOT_PASSWORD'),
                    //     string(credentialsId: 'WEATHERAPP_DB_PASSWORD', variable: 'WEATHERAPP_DB_PASSWORD'),
                    //     string(credentialsId: 'WEATHERAPP_APIKEY', variable: 'WEATHERAPP_APIKEY')
                    // ]) {
                    sh '''
version: '3.1'

services:
  db:
    container_name: weatherapp-db
    image: edjiguimkoudre8/adele93-db:${BUILD_NUMBER}
    environment:
      MYSQL_ROOT_PASSWORD: s5edouard
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - weatherapp
    restart: always

  redis:
    container_name: weatherapp-redis
    image: redis
    networks:
      - weatherapp
    environment:
      REDIS_USER: redis
      REDIS_PASSWORD: redis
    volumes:
      - redis-data:/data
    restart: always

  weather:
    container_name: weatherapp-weather
    image: edjiguimkoudre8/adele93-weather:${BUILD_NUMBER}
    expose:
      - 5000
    environment:
      APIKEY: ecbc396f46mshb65cbb1f82cf334p1fcc87jsna5e962a3c542
    networks:
      - weatherapp
    restart: always
    depends_on:
      - db
      - redis  # Weather depends on both db and redis

  auth:
    container_name: weatherapp-auth
    image: edjiguimkoudre8/adele93-auth:${BUILD_NUMBER}
    environment:
      DB_HOST: db
      DB_PASSWORD: s5edouard
    expose:
      - 8080
    networks:
      - weatherapp
    restart: always
    depends_on:
      - weather  # Auth depends on the weather service

  ui:
    container_name: weatherapp-ui
    image: edjiguimkoudre8/adele93-ui:${BUILD_NUMBER}
    environment:
      s5edouard: s5edouard
      AUTH_HOST: auth
      AUTH_PORT: 8080
      WEATHER_HOST: weather
      WEATHER_PORT: 5000
      REDIS_USER: redis
      REDIS_PASSWORD: redis
    expose:
      - 3000
    ports:
      - 3000:3000
    networks:
      - weatherapp
    restart: always
    depends_on:
      - auth  # UI depends on Auth

networks:
  weatherapp:

volumes:
  db-data:
  redis-data:
'''
                    // }
                }
            }
        }
        stage('Launch Application') {
            agent {
                label "production"
            }
            steps {
                script {
                    sh "docker-compose -f docker-compose.yaml up -d"
                }
            }
        }
    }
}
